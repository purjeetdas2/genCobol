Generated Forward Engineering Documentation

```java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

class Order {
    String orderID;
    String buyerID;
    String orderDate;
    String itemID;
    int itemQuantity;
    double itemUnitPrice;
}

class MainBusinessLogic {
    private static final String INPUT_FILE_PATH = "edi850.csv";
    private static final String OUTPUT_FILE_PATH = "output.csv";

    public static void main(String[] args) {
        Order inputRecord = new Order();
        Order outputRecord = new Order();

        try (BufferedReader reader = new BufferedReader(new FileReader(INPUT_FILE_PATH));
                BufferedWriter writer = new BufferedWriter(new FileWriter(OUTPUT_FILE_PATH))) {

            String line;
            while ((line = reader.readLine()) != null) {
                inputRecord = parseInputRecord(line);

                if (inputRecord != null) {
                    if (validateRecord(inputRecord)) {
                        transformRecord(inputRecord, outputRecord);
                        writeOutputRecord(writer, outputRecord);
                    } else {
                        System.out.println("Invalid record: " + inputRecord.orderID);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static Order parseInputRecord(String line) {
        // Logic to parse a line from the input file into an Order object
        return new Order(); // Placeholder return statement
    }

    private static boolean validateRecord(Order order) {
        return (order.itemQuantity >= 0 && order.itemUnitPrice >= 0);
    }

    private static void transformRecord(Order inputRecord, Order outputRecord) {
        outputRecord.orderID = inputRecord.orderID;
        outputRecord.buyerID = inputRecord.buyerID;
        outputRecord.orderDate = inputRecord.orderDate;
        outputRecord.itemID = inputRecord.itemID;
        outputRecord.itemQuantity = inputRecord.itemQuantity;
        outputRecord.itemUnitPrice = inputRecord.itemUnitPrice;
        outputRecord.itemTotalPrice = inputRecord.itemQuantity * inputRecord.itemUnitPrice;
    }

    private static void writeOutputRecord(BufferedWriter writer, Order outputRecord) throws IOException {
        writer.write(outputRecord.toString()); // Write the output record to file
        writer.newLine();
    }
}
```
